trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - eng/pipelines/aggregate-reports.yml

pool:
  vmImage: 'windows-2019'

variables:
  - template: templates/variables/globals.yml

stages:
  - stage: AggregateReports
    displayName: Aggregate Reports

    jobs:
      - job: GenerateReports
        timeoutInMinutes: 120
        steps:
          - template: /eng/pipelines/templates/steps/install-dotnet.yml

          - script: >-
              dotnet pack eng/service.proj -warnaserror
              /p:SDKType=client
              /p:ServiceDirectory=*
              /p:IncludeTests=false
              /p:PublicSign=false
              /p:OfficialBuildId=$(OfficialBuildId)
              /p:SkipDevBuildNumber=true
              /p:Configuration=$(BuildConfiguration)
              /p:CommitSHA=$(Build.SourceVersion)
              /p:ArtifactsPackagesDir=$(Build.ArtifactStagingDirectory)
            displayName: "Build and Package"

          #- pwsh: |
          #    npx cspell lint `
          #      --config ./.vscode/cspell.json `
          #      --no-must-find-files `
          #      'sdk/*/*/api/*.cs'
          #  displayName: Check spelling of public API surface
          #  # Spelling errors in public api surface are not blockers yet but will
          #  # become blockers when this is rolled out to all services. For now, turn
          #  # the pipeline yellow if spelling errors are detected but do not block.
          #  continueOnError: true
#
          #- template: /eng/common/pipelines/templates/steps/verify-links.yml
          #  parameters:
          #    Directory: ""
          #    CheckLinkGuidance: $true

          - pwsh: |
              $nugetPackages = Get-ChildItem -Path '$(Build.ArtifactStagingDirectory)' -Include Azure.*.nupkg -Exclude *.symbols.nupkg -Recurse
              New-Item -Path '$(Build.ArtifactStagingDirectory)' -Name 'nugetPackages' -ItemType 'directory'
              New-Item -Path '$(Build.ArtifactStagingDirectory)' -Name 'reports' -ItemType 'directory'
              $nugetPackages | Copy-Item -Destination '$(Build.ArtifactStagingDirectory)/nugetPackages'
            displayName: Isolate Nuget Packages to Process and Create Reports Directory

          - task: PowerShell@2
            displayName: Generate Dependency Report
            inputs:
              pwsh: true
              filePath: 'eng/scripts/dependencies/AnalyzeDeps.ps1'
              arguments: >
                -PackagesPath '$(Build.ArtifactStagingDirectory)/nugetPackages'
                -LockfilePath '$(Build.SourcesDirectory)/eng/Packages.Data.props'
                -OutPath '$(Build.ArtifactStagingDirectory)/reports/dependencies.html'
                -DumpPath '$(Build.ArtifactStagingDirectory)/reports'

          - task: PowerShell@2
            displayName: 'Generate azure-sdk.deps.json'
            inputs:
              pwsh: true
              filePath: 'eng/scripts/dependencies/generate-deps.ps1'
              arguments: >
                -PackagesPath '$(Build.ArtifactStagingDirectory)/nugetPackages'
                -DepsOutputFile '$(Build.ArtifactStagingDirectory)/reports/azure-sdk.deps.json'
                -ProjectRefPath '$(Build.ArtifactStagingDirectory)/reports'

          - task: PowerShell@2
            displayName: 'Validate dependencies with pwsh servicing'
            inputs:
              pwsh: true
              filePath: 'eng/scripts/dependencies/compare-deps-files.ps1'
              arguments: >
                -PSDepsFile 'https://aka.ms/ps-deps-servicing'
                -AzSdkDepsFile '$(Build.ArtifactStagingDirectory)/reports/azure-sdk.deps.json'

          - task: PowerShell@2
            displayName: 'Validate dependencies with pwsh stable'
            inputs:
              pwsh: true
              filePath: 'eng/scripts/dependencies/compare-deps-files.ps1'
              arguments: >
                -PSDepsFile 'https://aka.ms/ps-deps-stable'
                -AzSdkDepsFile '$(Build.ArtifactStagingDirectory)/reports/azure-sdk.deps.json'

          - task: PowerShell@2
            displayName: 'Validate dependencies with pwsh preview'
            inputs:
              pwsh: true
              filePath: 'eng/scripts/dependencies/compare-deps-files.ps1'
              arguments: >
                -PSDepsFile 'https://aka.ms/ps-deps-preview'
                -AzSdkDepsFile '$(Build.ArtifactStagingDirectory)/reports/azure-sdk.deps.json'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Report Artifacts'
            inputs:
              artifactName: reports
              path: '$(Build.ArtifactStagingDirectory)/reports'

          - task: AzureFileCopy@4
            displayName: 'Upload dependency report (1)'
            inputs:
              sourcePath: '$(Build.ArtifactStagingDirectory)/reports/*'
              azureSubscription: 'Azure SDK Artifacts'
              destination: AzureBlob
              storage: azuresdkartifacts
              containerName: 'azure-sdk-for-net'
              blobPrefix: dependencies
              AdditionalArgumentsForBlobCopy: '--exclude-pattern=*data.js*'

          - task: AzureFileCopy@4
            displayName: 'Upload dependency report (2)'
            inputs:
              sourcePath: '$(Build.ArtifactStagingDirectory)/reports/*'
              azureSubscription: 'Azure SDK Artifacts'
              destination: AzureBlob
              storage: azuresdkartifacts
              containerName: 'azure-sdk-for-net'
              blobPrefix: dependencies/dependencyGraph
              AdditionalArgumentsForBlobCopy: '--include-pattern=*data.js*'

          - task: PowerShell@2
            displayName: "Verify Repository Resource Refs"
            inputs:
              pwsh: true
              workingDirectory: $(Build.SourcesDirectory)
              filePath: eng/common/scripts/Verify-Resource-Ref.ps1

  - stage: ComplianceTools
    displayName: Compliance Tools
    dependsOn: []

    jobs:
      - job: ComplianceTools
        timeoutInMinutes: 120
        steps:
          - template: /eng/common/pipelines/templates/steps/policheck.yml
            parameters:
              ExclusionDataBaseFileName: "DotNetPoliCheckExclusion"
              PublishAnalysisLogs: false

          - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3
            displayName: 'Run CredScan'
            inputs:
              suppressionsFile: 'eng\CredScanSuppression.json'
            condition: succeededOrFailed()

          - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
            displayName: 'Post Analysis (CredScan)'
            inputs:
              GdnBreakAllTools: false
              GdnBreakGdnToolCredScan: true
              GdnBreakGdnToolCredScanSeverity: Error
              GdnBreakBaselineFiles: $(Build.SourcesDirectory)\eng\dotnet.gdnbaselines
              GdnBreakBaselines: baseline  
              # Used for generating baseline file
              # GdnBreakOutputBaselineFile: dotnet
              # GdnBreakOutputBaseline: baseline
            condition: succeededOrFailed()
            continueOnError: true

          - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
            displayName: 'Publish Security Analysis Logs'
            condition: succeededOrFailed()